// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "golang-foo": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/golang-starters/golang-rest-http/design
// --out=$(GOPATH)/src/github.com/golang-starters/golang-rest-http
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
	"regexp"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// StatusController is the controller interface for the Status actions.
type StatusController interface {
	goa.Muxer
	Show(*ShowStatusContext) error
}

// MountStatusController "mounts" a Status resource controller on the given service.
func MountStatusController(service *goa.Service, ctrl StatusController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/status", ctrl.MuxHandler("preflight", handleStatusOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowStatusContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleStatusOrigin(h)
	service.Mux.Handle("GET", "/api/status", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Status", "action", "Show", "route", "GET /api/status")
}

// handleStatusOrigin applies the CORS response headers corresponding to the origin.
func handleStatusOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("[.*openshift.io|localhost]")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "X-Request-Id, Content-Type, Authorization, If-None-Match, If-Modified-Since")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}
